name: CI/CD PRODUCTION

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

jobs:
  test:
    name: Test - Units & Integrations
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        run: mvn -B clean verify 
      - name: Create build path staging
        run: mkdir staging && cp target/*.jar staging
      - name: Upload math result for job
        uses: actions/upload-artifact@v1
        with:
          name: currency_converter_develop
          path: staging
          
  sonar:
      name: Test - SonarCloud Scan
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 11
        - name: Cache SonarCloud packages
          uses: actions/cache@v1
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache Maven packages
          uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - name: SonarCloud Scane
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run:  mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  artifact:
      name: Publish - GitHub Packages
      runs-on: ubuntu-18.04
      needs: [test,sonar]

      steps:
        - uses: actions/checkout@v1
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
            java-version: 11
        - name: Cache Maven packages
          uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - name: Build Package
          run: mvn -B package --file pom.xml
        - name: Maven Clean Package
          run: mvn -B clean package -DskipTests
        - name: Create Prodcution folder and Copy App
          run: mkdir production && cp target/*.jar production
        - name: Upload Artifact APP
          uses: actions/upload-artifact@v1     
          with:
            name: currency_converter_production
            path: production
        - name: Publish artifact on GitHub Packages
          run: mvn -B clean deploy -DskipTests
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   
  deploy:
    name: Deploying Artefact
    runs-on: ubuntu-latest
    needs: [test,sonar,artifact]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Package
        run: mvn -B package --file pom.xml
      - name: Create build path production
        run: mkdir production && cp target/*.jar production
        
      - name: Login to Heroku Container registry
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Build and push
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: currency-converter-project
        run: heroku plugins:install java && heroku create --no-remote && heroku deploy:jar production/currency-0.0.1-SNAPSHOT.jar --app currency-converter-project
